apply from: 'gradle/plugins/javafx.plugin'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
        
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}


def loadProperties(String sourceFileName) {

    def config = new Properties()
    def propFile = new File(projectDir,sourceFileName)

    if (propFile.isFile()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext.set(property.key, property.value)
        }
    }
}
// loads the property file
loadProperties('build.properties')
  
dependencies {
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.0.1-SNAPSHOT')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.0.1-SNAPSHOT', classifier: 'sources')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.0.1-SNAPSHOT', classifier: 'javadoc')

    compile group: 'org.reactfx', name: 'reactfx', version: '1.4.1'
    
    compile project(":VMultiMarkdown")
}

subprojects {
    // we want to skip task run for all subprojects
    task run  {println "skipping task run for: " + project }
}


javafx {
    mainClass "eu.mihosoft.vrl.mmd.editor.Main"
}

jfxDeploy {
    packaging = "image"
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {

    // dependencies except VRL
    from configurations.runtime.asFileTree.
        filter({file->return !file.name.startsWith("vrl-0")}).
        filter({file->return !file.name.startsWith("VRL.jar")}).
        files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output)
}



// compiles and installs the vrl plugin to the specified folder
task installVRLPlugin(dependsOn: [clean,jar]) << {
    println(">> copying vrl plugin to: " + vrldir+"/plugin-updates")
    copy {
        from buildDir.getPath()+"/libs/"+rootProject.name + ".jar"
        into vrldir+"/plugin-updates"
        include '**/*.jar'
    }
}